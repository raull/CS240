
public class TrieDataStructure {
	
	private TrieNode rootNode;
	private int nodeCount = 0;
	private int wordCount = 0;
	
	//Constructors
	public void TrieNode() {
		rootNode = new TrieNode();
	}
	
	public void TrieNode(String[] initialStrings) {
		rootNode = new TrieNode();
		for (String string : initialStrings) {
			this.add(string);
		}
	}
	
	//Methods
	
	public void add(String word) {
		this.addString(word, this.rootNode);
	}
	
	private void addString(String word, TrieNode curNode) {
		if (word.length() == 1) {
			curNode.count++;
			this.wordCount++;
			return;
		}
		
		curNode.character = word.charAt(0);
		int charPosition = curNode.character - 'a';
		TrieNode childNode = curNode.nodes[charPosition];
		String newWord = word.substring(1, word.length()-1);
		
		if (childNode == null) {
			childNode = new TrieNode();
			this.nodeCount++;
		}
		
		addString(newWord, childNode);
	}
	
	public Boolean find() {
		return false;
	}
	
	//Getters and Setters

	public int getNodeCount() {
		return nodeCount;
	}

	public int getWordCount() {
		return wordCount;
	}
	
	
	
	// TrieNode Inner Class
	private class TrieNode{
		private TrieNode[] nodes;
		private int count;
		private char character;
		
	}
}
