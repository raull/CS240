package client.batch.input;

import java.awt.Color;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;

import javax.swing.BoxLayout;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import shared.modal.Batch;
import shared.modal.Field;
import shared.modal.Project;
import client.batch.state.BatchState;
import client.batch.state.BatchStateListener;
import client.batch.state.Cell;
import client.spell.suggestion.SuggestionDialog;

@SuppressWarnings("serial")
public class BatchFormEntryComponent extends JComponent {
	
	private JList<String> rowList;
	private JPanel entryPanel;
	private ArrayList<JTextField> textFields = new ArrayList<JTextField>();
	
	private JPopupMenu popupMenu;
	
	private Frame owner;
	
	public BatchFormEntryComponent(Frame owner) {
		super();
		
		this.owner = owner;
		
		this.setLayout(new BoxLayout(this, BoxLayout.X_AXIS));
		
		//Set List properties
		rowList = new JList<String>();
		rowList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		rowList.addListSelectionListener(new FormEntryListSelectionListener());
		JScrollPane listScrollPane = new JScrollPane(rowList);
		
		//Set Entry Panel properties
		entryPanel = new JPanel();
		entryPanel.setLayout(new GridBagLayout());
		JScrollPane entryPanelScrollPane = new JScrollPane(entryPanel);
		
		//Add Scroll Panes
		this.add(listScrollPane);
		this.add(entryPanelScrollPane);
		
		BatchState.addBatchStateListener(new FormEntryBatchStateListener());
	}
	
	@Override
	protected void paintComponent(Graphics g) {
		Cell cell = new Cell(BatchState.getSelectedCell().getColumn(), BatchState.getSelectedCell().getRow());
		//Reset the focus of the textfield when component shows up again
		if (cell.getColumn() > 0) {
			cell.setColumn(cell.getColumn() - 1);
		}
		
		textFields.get(cell.getColumn()).requestFocus();
	}
	
	private void setupGUI() {
		//Setup list
		int rowNum = BatchState.getProject().getRecordsPerBatch();
		
		entryPanel.setLayout(new GridBagLayout());
		GridBagConstraints constraints = new GridBagConstraints();
		constraints.fill = GridBagConstraints.HORIZONTAL;
		constraints.gridwidth = GridBagConstraints.REMAINDER;
		constraints.anchor = GridBagConstraints.NORTHWEST;
		
		String[] rowTitles = new String[rowNum];
		for (int i = 0; i < rowNum; i++) {
			rowTitles[i] = "" + (i+1);
		}
		
		rowList.setListData(rowTitles);
		
		//Set up fields their listeners
		
		ArrayList<Field> fields = BatchState.getProject().getFields();
		
		for (Field field : fields) {
			JPanel fieldPanel = new JPanel();
			fieldPanel.setLayout(new BoxLayout(fieldPanel, BoxLayout.X_AXIS));
			
			JLabel fieldLabel = new JLabel(field.getTitle());
			fieldPanel.add(fieldLabel);
			JTextField fieldTextField = new JTextField(20);
			fieldTextField.addFocusListener(new FormEntryFocusListener(field.getColNumber() - 1));
			fieldTextField.addKeyListener(new KeyAdapter() {
				
				@Override
	            public void keyPressed(KeyEvent e) {
	                if (e.getKeyCode() == KeyEvent.VK_TAB) {
	                	
	                	JTextField textField = (JTextField)e.getSource();
	                	
	                    if (e.getModifiers() > 0) {
	                        textField.transferFocusBackward();
	                    } else {
	                        textField.transferFocus();
	                    }
	                    e.consume();
	                }
	            }
				
			});
			fieldTextField.addMouseListener(new MouseAdapter() {
				
				@Override
				public void mouseClicked(MouseEvent e) {
					if (e.getButton() == MouseEvent.BUTTON3) {
						JTextField textFieldClicked = (JTextField)e.getSource();
						
						for (int i = 0; i < textFields.size(); i++) {
							if(textFieldClicked == textFields.get(i)) {
								//Convert event to Parent
								MouseEvent e2 = SwingUtilities.convertMouseEvent(e.getComponent(), e, entryPanel);
								showPopupMenu(e2.getX(), e2.getY(), new Cell(i, rowList.getSelectedIndex()));
							}
						}
					}
				}
				
			});
			textFields.add(fieldTextField);
			fieldPanel.add(fieldTextField);
			
			entryPanel.add(fieldPanel, constraints);
		}
	}
	
	private void showPopupMenu(int x, int y, final Cell cell) {
		popupMenu = new JPopupMenu();
		JMenuItem suggestionItem = new JMenuItem("See Suggestions");
		suggestionItem.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				SuggestionDialog suggestionDialog = new SuggestionDialog(cell, BatchState.getValue(cell.getColumn(), cell.getRow()), owner);
				suggestionDialog.setVisible(true);
			}
		});
		popupMenu.add(suggestionItem);
		
		popupMenu.show(this, x, y);
	}
	
	
	private class FormEntryBatchStateListener implements BatchStateListener {

		@Override
		public void selectedCellChanged(Cell newSelectedCell) {
			Cell selectedCell = new Cell(newSelectedCell.getColumn(), newSelectedCell.getRow());
			//Map it to the correct cell
			rowList.setSelectedIndex(selectedCell.getRow());
			if (selectedCell.getColumn() > 0) {
				selectedCell.setColumn(selectedCell.getColumn() - 1);
			}
			textFields.get(selectedCell.getColumn()).requestFocus();
		}

		@Override
		public void newBatchLoaded(Batch newBatch, Project newProject) {
			//Reset UI
			setupGUI();
		}

		@Override
		public void valueChanged(Cell editedCell, String value) {
			//Determine TExtfiled to set the value
			Cell cell = new Cell(editedCell.getColumn(), editedCell.getRow());
			
			if (cell.getRow() == rowList.getSelectedIndex()) {
				
				textFields.get(cell.getColumn()).setText(value);
				
			}
			
			if (BatchState.isCellError(new Cell(editedCell.getColumn(), rowList.getSelectedIndex()))) {
				textFields.get(cell.getColumn()).setBackground(new Color(240, 24, 24, 80));
			} else {
				textFields.get(cell.getColumn()).setBackground(Color.WHITE);
			}
		}
		
	}
	
	private class FormEntryListSelectionListener implements ListSelectionListener {

		@Override
		public void valueChanged(ListSelectionEvent e) {
			
			int row = rowList.getSelectedIndex();
			int column = BatchState.getSelectedCell().getColumn();
			
			for (int i = 0; i < textFields.size(); i++) {
				String value = BatchState.getValue(i, row);
				if (value == null) {
					textFields.get(i).setText("");
				} else {
					textFields.get(i).setText(value);
				}
				
				if (column == i) {
					textFields.get(i).requestFocus();
				}
				
				if (BatchState.isCellError(new Cell(i, row))) {
					textFields.get(i).setBackground(new Color(240, 24, 24, 80));
				} else {
					textFields.get(i).setBackground(Color.WHITE);
				}
				
			}
			
			BatchState.setSelectedCell(new Cell(column, row));
		}
		
	}
	
	private class FormEntryFocusListener implements FocusListener {
		
		private int column;
		
		public FormEntryFocusListener(int column) {
			this.column = column;
		}
		
		@Override
		public void focusGained(FocusEvent e) {
			BatchState.setSelectedCell(new Cell(column + 1, rowList.getSelectedIndex()));
		}

		@Override
		public void focusLost(FocusEvent e) {
			JTextField field = (JTextField)e.getSource();
			
			for (int i = 0; i < textFields.size(); i++) {
				if (textFields.get(i) == field) {
					if (rowList.getSelectedIndex() >= 0) {
						BatchState.setValue(i, rowList.getSelectedIndex(), field.getText());
					}
				}
			}
			
		}
		
	}

}
