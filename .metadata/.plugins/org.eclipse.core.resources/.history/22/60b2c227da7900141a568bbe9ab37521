package client.batch.state;

import java.io.FileOutputStream;
import java.util.ArrayList;

import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.annotations.XStreamOmitField;
import com.thoughtworks.xstream.io.xml.DomDriver;

import shared.modal.Batch;
import shared.modal.Project;

public class BatchState {
	
	@XStreamOmitField 
	private ArrayList<BatchStateListener> listeners = new ArrayList<BatchStateListener>();
	
	private String[][] values;
	private Cell selectedCell;
	private Project project;
	private Batch batch;
		
	private static BatchState instance = null;
	
	public static BatchState singleton() {
		if (instance == null) {
			return new BatchState();
		} else {
			return instance;
		}
	}
	
	//Listeners
	public static void addBatchStateListener(BatchStateListener listener) {
		BatchState.singleton().listeners.add(listener);
	}
	
	//Methods
	public static void save() {
		try {
			XStream stream = new XStream(new DomDriver());
			FileOutputStream output = new FileOutputStream("sheila.xml");
			
			stream.toXML(singleton(), output);
			output.close();
		} catch (Exception e) {
			
		}
		
	}
	
	//Getters and Setters
	public static void setBatchSize(int numColumns, int numRows) {
		BatchState.singleton().values = new String[numColumns][numRows];
	}
	
	public static void setValue(Cell cell) {
		BatchState.singleton().values[cell.getColumn()][cell.getRow()] = cell.getValue();
	}
	
	public static String getValue(int column, int row) {
		return BatchState.singleton().values[column][row];
	}
	
	public static Cell getSelectedCell() {
		return BatchState.singleton().selectedCell;
	}
	
	public static void setSelectedCell(Cell selectedCell) {
		BatchState.singleton().selectedCell = selectedCell;
		
		for (BatchStateListener listener : BatchState.singleton().listeners ) {
			listener.selectedCellChanged(selectedCell);
		}
	}

	/**
	 * @return the project
	 */
	public static Project getProject() {
		return BatchState.singleton().project;
	}

	/**
	 * @param project the project to set
	 */
	public static void setProject(Project project) {
		BatchState.singleton().project = project;
	}

	/**
	 * @return the batch
	 */
	public static Batch getBatch() {
		return BatchState.singleton().batch;
	}

	/**
	 * @param batch the batch to set
	 */
	public static void setBatch(Batch batch) {
		BatchState.singleton().batch = batch;
	}
	
}
