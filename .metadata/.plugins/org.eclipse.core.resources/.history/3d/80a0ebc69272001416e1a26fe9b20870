package client.batch.download;

import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.net.URL;
import java.util.ArrayList;

import javax.imageio.ImageIO;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JPanel;

import client.facade.ClientFacade;
import shared.modal.Project;

@SuppressWarnings("serial")
public class DownloadBatchDialog extends JDialog {
	
	private JComboBox<String> projectList;
	private ArrayList<Project> projects;
	
	private Project selectedProject;
	
	public DownloadBatchDialog(Frame owner) {
		super(owner, true);
		
		this.setTitle("Download Batch");
		
	}
	
	
	private void setupGUI() {
		this.getContentPane().setLayout(new BoxLayout(this.getContentPane(), BoxLayout.Y_AXIS));
		this.setSize(new Dimension(400, 100));
		this.setMaximumSize(this.getSize());
		this.setMinimumSize(this.getSize());
		this.setLocationRelativeTo(null);
		this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
		
		//Set up Projects Panel
		
		JPanel projectPanel = new JPanel();
		projectPanel.setPreferredSize(new Dimension(this.getContentPane().getSize().width, 20));
		projectPanel.add(new JLabel("Project: "));
		
		//Set Up projects
		String[] projectNames = new String[projects.size()];
		for (int i = 0; i < projects.size(); i++) {
			projectNames[i] = projects.get(i).getTitle();
		}
		
		projectList = new JComboBox<String>(projectNames);
		projectList.addItemListener(new ItemListener() {
			
			@Override
			public void itemStateChanged(ItemEvent e) {
				selectedProject = projects.get(projectList.getSelectedIndex());
				System.out.println("Project Selected: \n" + selectedProject);
			}
		});
		projectPanel.add(projectList);
		
		JButton sampleButton = new JButton("View Sample Image");
		sampleButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				try {
					String path = ClientFacade.getSampleImage(selectedProject);
					URL url = new URL(path);
					Image image = (ImageIO.read(url));
					
					presentSampleImage(image);
					
				} catch (Exception e2) {
					// TODO: handle exception
				}
			}
		});
		projectPanel.add(sampleButton);
		
		//Set up buttons panel
		
		JPanel buttonPanel = new JPanel();
		buttonPanel.setPreferredSize(new Dimension(this.getContentPane().getSize().width, 20));
		
		JButton cancelButton = new JButton("Cancel");
		cancelButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				DownloadBatchDialog.this.setVisible(false);
			}
			
		});
		JButton downloadButton = new JButton("Download");
		
		buttonPanel.add(cancelButton);
		buttonPanel.add(downloadButton);
		
		this.getContentPane().add(projectPanel);
		this.getContentPane().add(buttonPanel);
	}
	
	private void presentSampleImage(Image image) {
		image = image.getScaledInstance(700, -1, 0);
		JLabel imageIcon = new JLabel(new ImageIcon(image));
		
		JDialog imageDialog = new JDialog(DownloadBatchDialog.this, true);
		imageDialog.setSize(700, 500);
		imageDialog.setLocationRelativeTo(DownloadBatchDialog.this);
		imageDialog.add(imageIcon);
		
		imageDialog.setVisible(true);
	}
	
	
	@Override
	public void setVisible(final boolean b) {
		
		if (b == true) {
			try {
				projects = (ArrayList<Project>)ClientFacade.getProjects();
			} catch (Exception e) {
				System.out.println("Failed to get Projects");
			}
		}
		
		this.setupGUI();

		
		selectedProject = projects.get(projectList.getSelectedIndex());

		
		super.setVisible(b);
	}
}
