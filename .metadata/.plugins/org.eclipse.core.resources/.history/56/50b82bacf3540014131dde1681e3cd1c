package server.access;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.List;

import server.Database;
import shared.modal.*;

/**
 * User Data Access Object class. For Accessing and persisting to the database concerning User operations
 * */
public class UserDAO {
	
	
	//Instance Fields
	/**
	 * Database object to start and end transactions
	 */
	private Database db;
	
	
	//-----------------------------------------------------
	//Constructors
	
	public UserDAO(Database db) {
		this.db = db;
	}
	
	
	//-----------------------------------------------------
	/**
	 * Find all the Users in the Database
	 * @return A list with all the Users in the Database
	 * */
	public List<User> findAll() {
		return null;
	}
	
	/**
	 * Find a User by providing the User's ID
	 * @param id of the user to find
	 * @return A User matching the provided User
	 */
	public User findById(int id) {
		
		PreparedStatement stm = null;
		ResultSet result = null;
		
		try {
			
		} catch (Exception e) {
			// TODO: handle exception
		}
		
		return null;
	}
	
	/**
	 * Find a User by providing the User's username
	 * @param username of the user to find
	 * @return A User matching the provided username
	 */
	public User findByUsername(String username) {
		return null;
	}
	
	/**
	 * Insert a new User to the Database
	 * @param newUser, a User object representing the new User to persist
	 * @return true if the User was inserted successfully, otherwise false
	 */
	public boolean insertNewUser(User newUser) {
		return false;
	}
	
	/**
	 * Update user in the Database
	 * @param user, User object containing new information to update
	 * @return true if the User was updated successfully, otherwise false
	 */
	public boolean updateUser(User user) {
		return false;
	}
	
	/**
	 * Delete User 
	 * @param User object representing the User to delete
	 * @return true if the User was deleted successfully, otherwise false
	 */
	public boolean deleteUser(User user) {
		return false;
	}
	
	/**
	 * Delete User by providing the User's ID
	 * @param id representing the User's ID
	 * @return true if the User was deleted successfully, otherwise false
	 */
	public boolean deleteUserWithId(int id) {
		return false;
	}
	
	
}
