package server.access;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import server.Database;
import server.DatabaseException;
import shared.modal.*;

/**
 * Project Data Access Object class. For Accessing and persisting to the database concerning Project operations
 * @author Raul Lopez Villalpando
 *
 */
public class ProjectDAO {
	
	//Instance Fields
	/**
	 * Database object to start and end transactions
	 */
	private Database db;
	
	//-----------------------------------------------------
	//Constructors
	
	public ProjectDAO(Database db) {
		this.db = db;
	}
	
	//-----------------------------------------------------
	//Methods
	
	/**
	 * Find all the Projects in the Database
	 * @return A list with all the Projects in the Database
	 * */
	public List<Project> findAll() throws DatabaseException{
		
		PreparedStatement stm = null;
		ResultSet result = null;
				
		ArrayList<Project> projectList = new ArrayList<Project>();
		try {			
			//Set up Query
			String sql = "SELECT * FROM project";
			stm = db.getConnection().prepareStatement(sql);

			//Execute Query
			result = stm.executeQuery();
			
			//Handle Response to create new User
			while (result.next()) {

				String title = result.getString(2);
				int recordsPerBatch = result.getInt(3);
				int firstYCood = result.getInt(4);
				int recordHeight = result.getInt(5);
				
				Project newProject = new Project(title, recordsPerBatch, firstYCood, recordHeight);
				newProject.setId(result.getInt(1));
				
				projectList.add(newProject);
			}
			
		} catch (SQLException e) {
			throw new DatabaseException("Error getting all Projects: "+ e.getLocalizedMessage(), e);
		} 
				
		return projectList;
	}
	
	/**
	 * Find a Project by providing the Project's ID
	 * @param id of the project to find
	 * @return A Project matching the provided ID
	 */
	public Project findById(int id) {
		return null;
	}
	
	/**
	 * Insert a new Project to the Database
	 * @param newProject, a Project object representing the new Project to persist
	 * @return true if the Project was inserted successfully, otherwise false
	 */
	public boolean insertNewProject(Project newProject) {
		return false;
	}
	
	/**
	 * Update Project in the Database
	 * @param project, Project object containing new information to update
	 * @return true if the Project was updated successfully, otherwise false
	 */
	public boolean updateProject(Project project) {
		return false;
	}
	
	/**
	 * Delete Project by providing the Project's ID
	 * @param id representing the Project's ID
	 * @return true if the Project was deleted successfully, otherwise false
	 */
	public boolean deleteProjectWithId(int id) {
		return false;
	}
}
