package client.batch.input;

import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

import javax.swing.AbstractCellEditor;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.JComponent;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellEditor;

import shared.modal.Batch;
import shared.modal.Project;
import client.batch.state.BatchState;
import client.batch.state.BatchStateListener;
import client.batch.state.Cell;

@SuppressWarnings("serial")
public class BatchTableComponent extends JComponent {
	
	private JScrollPane scrollPane;
	private JTable table;
	private BatchTableModel model;
	
	private Cell selectedCell;
	
	public BatchTableComponent() {
		super();
		this.setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));
		setupGUI();
	}
	
	private void setupGUI() {
		model = new BatchTableModel();
		table = new JTable();
		table.setModel(model);
		table.setGridColor(new Color(0, 0, 0, 50));
		table.addMouseListener(new TableSelectionListener());
		table.setRowSelectionAllowed(false);
		table.setDefaultRenderer(Object.class, new CellRenderer());
		
		CellEditor editor = new CellEditor();
		table.setDefaultEditor(Object.class, editor);
		editor.addCellEditorListener(new CellEditorListener() {
			
			@Override
			public void editingStopped(ChangeEvent e) {
				System.out.println("Just Edidted a cell");
			}
			
			@Override
			public void editingCanceled(ChangeEvent e) {
				// TODO Auto-generated method stub
				
			}
		});
		
		model.addTableModelListener(table);
		scrollPane = new JScrollPane(table);
		this.add(scrollPane);
				
		BatchState.addBatchStateListener(new BatchStateTableListener());
	}
	
	private class BatchStateTableListener implements BatchStateListener {

		@Override
		public void selectedCellChanged(Cell newSelectedCell) {
			selectedCell = newSelectedCell;
			table.repaint();
		}

		@Override
		public void newBatchLoaded(Batch newBatch, Project newProject) {
			model.fireTableStructureChanged();
			
		}
		
	}
	
	private class TableSelectionListener extends MouseAdapter {

		@Override
		public void mouseClicked(MouseEvent e) {
			int row = table.rowAtPoint(e.getPoint());
			int column = table.columnAtPoint(e.getPoint());
			
			Cell newCell = new Cell(column, row);
			
			BatchState.setSelectedCell(newCell);
		}
	}
	
	private class CellRenderer extends DefaultTableCellRenderer {
		
		@Override
		public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {
			
			Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
			
			if (selectedCell != null && selectedCell.getRow() == row && selectedCell.getColumn() == column ) {
				c.setBackground(new Color(41, 153, 240, 80));
			} else {
				c.setBackground(Color.WHITE);
			}
			
			return c;
		}
	}
	
	private class CellEditor extends AbstractCellEditor implements TableCellEditor {

		private JTextField cellField;
		private String value;
		
		public CellEditor() {
			cellField = new JTextField();
			cellField.setBorder(BorderFactory.createLineBorder(Color.WHITE));
			cellField.addActionListener(new ActionListener() {
				
				@Override
				public void actionPerformed(ActionEvent e) {
					
					fireEditingStopped();
				}
			});
		}
		
		@Override
		public Object getCellEditorValue() {
			return value;
		}

		@Override
		public Component getTableCellEditorComponent(JTable table,
				Object value, boolean isSelected, int row, int column) {
			
			this.value = (String)value;
			cellField.setText(this.value);
			
			return cellField;
		}
		
	}
	
}
