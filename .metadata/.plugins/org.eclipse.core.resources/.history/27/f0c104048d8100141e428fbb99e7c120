package client.spell;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.TreeSet;

public class SpellingCorrector implements SpellCorrector{
	
	private TrieDataStructure dictionaryTrieDataStructure = new TrieDataStructure();
	
	/**
	 * Tells this <code>SpellCorrector</code> to use the given file as its dictionary
	 * for generating suggestions. 
	 * @param dictionaryFileName File containing the words to be used
	 * @throws IOException If the file cannot be read
	 */
	public void useDictionary(String dictionaryFileName) throws IOException {
		File dictionaryFile = new File(dictionaryFileName);
		Scanner scanner = new Scanner(dictionaryFile);
		
		while (scanner.hasNext()) {
			this.dictionaryTrieDataStructure.add(scanner.next());
		}
		
		scanner.close();
	}
	
	/**
	 * Tells this <code>SpellCorrector</code> to use the given file as its dictionary
	 * for generating suggestions. 
	 * @param dictionaryURL URL containing the words to be used
	 * @throws IOException If the file cannot be read
	 */
	public void useDictionary(URL dictionaryURL) throws IOException {
		Scanner scanner = new Scanner(dictionaryURL.openStream());
		scanner.useDelimiter(",");
		
		while (scanner.hasNext()) {
			String word = scanner.next();
			this.dictionaryTrieDataStructure.add(word);
		}
		
		scanner.close();
	}
	
	/**
	 * Suggest a word from the dictionary that most closely matches
	 * <code>inputWord</code>
	 * @param inputWord
	 * @return The suggestion
	 * @throws NoSimilarWordFoundException If no similar word is in the dictionary
	 */
	public String suggestSimilarWord(String inputWord) throws NoSimilarWordFoundException {
		inputWord = inputWord.toLowerCase();
		
		if (this.dictionaryTrieDataStructure.find(inputWord) != null) {
			return inputWord;
		}
		
		// Do a distance 1 transformation
		TreeSet<TrieDataStructure.TrieNode> foundWordsArrayList = new TreeSet<TrieDataStructure.TrieNode>();
		ArrayList<String> transformedWordsArrayList = new ArrayList<String>();
		
		transformedWordsArrayList.addAll(StringTransformation.allTransformationsFromString(inputWord));
		
		for (int i = 0; i < transformedWordsArrayList.size(); i++) {
			TrieDataStructure.TrieNode curNode = this.dictionaryTrieDataStructure.find(transformedWordsArrayList.get(i));
			
			if(curNode != null) {
				foundWordsArrayList.add(curNode);
			}
		}
		
		if (foundWordsArrayList.size() <= 0) {
			//Do a distance 2 transformation from all of the Distance 1 transformations
			for (String editedWord : transformedWordsArrayList) {
				ArrayList<String> curTransformedWordsArrayList = new ArrayList<String>();
				curTransformedWordsArrayList.addAll(StringTransformation.allTransformationsFromString(editedWord));
				
				for (int i = 0; i < curTransformedWordsArrayList.size(); i++) {
					TrieDataStructure.TrieNode curNode = this.dictionaryTrieDataStructure.find(curTransformedWordsArrayList.get(i));
					
					if(curNode != null) {
						foundWordsArrayList.add(curNode);
					}
				}
			}
			
			if (foundWordsArrayList.size() <= 0) {
				throw new NoSimilarWordFoundException();
			}

		}
		
		return foundWordsArrayList.last().getWord();
	}
	
	/**
	 * Suggest a word from the dictionary that most closely matches
	 * <code>inputWord</code>
	 * @param inputWord
	 * @return The suggestion
	 * @throws NoSimilarWordFoundException If no similar word is in the dictionary
	 */
	public List<String> suggestSimilarWords(String inputWord) throws NoSimilarWordFoundException {
		inputWord = inputWord.toLowerCase();
		
		if (this.dictionaryTrieDataStructure.find(inputWord) != null) {
			return null;
		}
		
		// Do a distance 1 transformation
		TreeSet<TrieDataStructure.TrieNode> foundWordsArrayList = new TreeSet<TrieDataStructure.TrieNode>();
		ArrayList<String> transformedWordsArrayList = new ArrayList<String>();
		
		transformedWordsArrayList.addAll(StringTransformation.allTransformationsFromString(inputWord));
		
		for (int i = 0; i < transformedWordsArrayList.size(); i++) {
			TrieDataStructure.TrieNode curNode = this.dictionaryTrieDataStructure.find(transformedWordsArrayList.get(i));
			
			if(curNode != null) {
				foundWordsArrayList.add(curNode);
			}
		}
		
		if (foundWordsArrayList.size() <= 0) {
			//Do a distance 2 transformation from all of the Distance 1 transformations
			for (String editedWord : transformedWordsArrayList) {
				ArrayList<String> curTransformedWordsArrayList = new ArrayList<String>();
				curTransformedWordsArrayList.addAll(StringTransformation.allTransformationsFromString(editedWord));
				
				for (int i = 0; i < curTransformedWordsArrayList.size(); i++) {
					TrieDataStructure.TrieNode curNode = this.dictionaryTrieDataStructure.find(curTransformedWordsArrayList.get(i));
					
					if(curNode != null) {
						foundWordsArrayList.add(curNode);
					}
				}
			}
			
			if (foundWordsArrayList.size() <= 0) {
				throw new NoSimilarWordFoundException();
			}

		}
		
		ArrayList<String> suggestions = new ArrayList<String>();
		for (TrieDataStructure.TrieNode node : foundWordsArrayList) {
			suggestions.add(node.getWord());
		}
		
		return suggestions;
	}
	
	
	public static void main(String[] args) {
		SpellingCorrector spell = new SpellingCorrector();
		
		try {
			spell.useDictionary("words.txt");
		} catch (Exception e) {
			System.out.println("File not found");
		}
		
		//System.out.println("The words are: \n" + spell.dictionaryTrieDataStructure);
		
		Scanner inputScanner = new Scanner(System.in);
		System.out.println("Enter a word :");
		String inputWordString = inputScanner.nextLine();
		
		try {
			System.out.println("Suggestion to the word " + inputWordString + " is : " + spell.suggestSimilarWord(inputWordString));
		} catch (Exception e) {
			System.out.println("No Similar Word Found");
		}
		
		inputScanner.close();
		
	}

}
