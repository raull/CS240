package listem;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public abstract class FileProcessor {
	
	protected boolean recursion = false;
	protected File directory;
	protected String fileNamePattern = "";	
	
	protected FileProcessor(File directory, String fileNamePattern, boolean recursive) {
		this.recursion = recursive;
		this.directory = directory;
		this.fileNamePattern = fileNamePattern;
	}
	
	protected FileProcessor() {
		
	}
	
	protected final void processDirectory(File directory) {
		if (!directory.isDirectory()) {
			notDirectory(directory);
			return;
		}
		
		if (!directory.canRead()) {
			cannotReadDirectory(directory);
		}
		
		File[] filesInDirectoryFiles = directory.listFiles();
		
		for (File file : filesInDirectoryFiles) {
			if (file.isDirectory() && recursion) {
				processDirectory(file);
			}
			else {
				if (file.getName().matches(fileNamePattern)) {
					fileMatched(file);
					processFile(file);
				}
			}
		}
		
		return;
	}
	
	protected final void processFile(File file) {
		if (!file.isFile()) {
			notFile(file);
		}
		
		try {
			Scanner scanner = new Scanner(file);
			
			while (scanner.hasNext()) {
				String line = scanner.nextLine();
				lineFound(line);
			}
			
			scanner.close();
		} catch (FileNotFoundException e) {
			System.out.println("File not found");
		} 
		
		
	}
	
	//Call backs to Subclasses
	protected void cannotReadDirectory(File directory) {
		System.out.println("You do not have permission to read directory" + directory.getAbsolutePath());
	}
	
	protected void cannotReadFile(File file) {
		System.out.println("You do not have permission to read file " + file.getAbsolutePath());
	}
	
	protected void notDirectory(File directory) {
		System.out.println(directory.getName() + " is not a directory");
	}
	
	protected void notFile(File file) {
		System.out.println(file.getName() + " is not a file");
	}
	
	protected void fileMatched(File file) {
		System.out.println(file.getAbsolutePath() + " found");
	}
	
	protected void lineFound(String line) {
		
	}
	
	// main Method
	public static void main(String[] args) {
		GrepCommand fileProcessor = new GrepCommand();
		fileProcessor.fileNamePattern = "//.java";
		File directory = new File("/Users/raull/Documents/CS240/Project_3/src/listem");
		fileProcessor.processDirectory(directory);
	}
}
