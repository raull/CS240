package client.batch.input;

import java.awt.Color;
import java.awt.Component;
import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

import javax.swing.BoxLayout;
import javax.swing.JComponent;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;

import shared.modal.Batch;
import shared.modal.Project;
import client.batch.state.BatchState;
import client.batch.state.BatchStateListener;
import client.batch.state.Cell;
import client.spell.suggestion.SuggestionDialog;

@SuppressWarnings("serial")
public class BatchTableComponent extends JComponent {
	
	private JScrollPane scrollPane;
	private JTable table;
	private BatchTableModel model;
	
	private JPopupMenu popupMenu;
	
	private Frame owner;
		
	public BatchTableComponent(Frame owner) {
		super();
		this.owner = owner;
		
		this.setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));
		setupGUI();
	}
	
	private void setupGUI() {
		model = new BatchTableModel();
		table = new JTable();
		table.setModel(model);
		table.setGridColor(new Color(0, 0, 0, 50));
		table.addMouseListener(new TableSelectionListener());
		table.setCellSelectionEnabled(true);
		table.setDefaultRenderer(Object.class, new CellRenderer());
						
		scrollPane = new JScrollPane(table);
		this.add(scrollPane);
				
		BatchState.addBatchStateListener(new BatchStateTableListener());
	}
	
	private void showPopupMenu(int x, int y, final Cell cell) {
		popupMenu = new JPopupMenu();
		JMenuItem suggestionItem = new JMenuItem("See Suggestions");
		suggestionItem.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				SuggestionDialog suggestionDialog = new SuggestionDialog(cell, BatchState.getValue(cell.getColumn(), cell.getRow()), null);
				suggestionDialog.setVisible(true);
			}
		});
		popupMenu.add(suggestionItem);
		
		popupMenu.show(this, x, y);
	}
	
	private class BatchStateTableListener implements BatchStateListener {

		@Override
		public void selectedCellChanged(Cell newSelectedCell) {
			table.changeSelection(newSelectedCell.getRow(), newSelectedCell.getColumn(), false, false);
			model.fireTableCellUpdated(newSelectedCell.getRow(), newSelectedCell.getColumn());
			table.repaint();
		}

		@Override
		public void newBatchLoaded(Batch newBatch, Project newProject) {
			model.fireTableStructureChanged();
			
		}

		@Override
		public void valueChanged(Cell editedCell, String value) {
			model.fireTableChanged(null);;	
		}
		
	}
	
	private class TableSelectionListener extends MouseAdapter {

		@Override
		public void mouseClicked(MouseEvent e) {
			
			int row = table.rowAtPoint(e.getPoint());
			int column = table.columnAtPoint(e.getPoint());
			
			Cell newCell = new Cell(column, row);
			
			//Check if it has an error
			if (e.getButton() == MouseEvent.BUTTON3 && BatchState.isCellError(new Cell(column - 1, row))) {
				System.out.println("Right Button Clicked");
				
				showPopupMenu(e.getX(), e.getY(), new Cell(column - 1, row));
			}
			
			BatchState.setSelectedCell(newCell);
		}
	}
	
	private class CellRenderer extends DefaultTableCellRenderer {
		
		@Override
		public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {
			
			Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
			
			//Check if the Cell needs to be red
			if (column > 0 && BatchState.isCellError(new Cell(column-1, row))) {
				c.setBackground(new Color(240, 24, 24, 80));
				return c;
			}
			
			//Check For cases of Cell Selection
			if (hasFocus || isSelected) {
				c.setBackground(new Color(41, 153, 240, 80));
				
				//Check if it is a new selected Cell
				if (BatchState.getSelectedCell().getColumn() != column || BatchState.getSelectedCell().getRow() != row) {
					BatchState.setSelectedCell(new Cell(column, row));
				}

			}else if(BatchState.getSelectedCell() != null && BatchState.getSelectedCell().getColumn() == column && BatchState.getSelectedCell().getRow() == row) {
				c.setBackground(new Color(41, 153, 240, 80));
			}else {
				c.setBackground(Color.WHITE);
			}
			
			
			return c;
		}
	}
	
	
}
