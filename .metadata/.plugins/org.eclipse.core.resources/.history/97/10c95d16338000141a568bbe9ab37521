package client.batch.state;

import java.awt.Dimension;
import java.awt.Point;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;

import client.facade.ClientFacade;
import client.spell.SpellingCorrector;
import shared.modal.Batch;
import shared.modal.Field;
import shared.modal.Project;

public class BatchState {
	
	private transient ArrayList<BatchStateListener> listeners = new ArrayList<BatchStateListener>();
	
	private ArrayList<Cell> errorCells = new ArrayList<Cell>();
	
	private String[][] values;
	private Cell selectedCell;
	private Project project;
	private Batch batch;
	private Boolean highlight = true;
	private Boolean inverted = false;
	private Point mainFrameLocation;
	private Point batchImageCenter;
	private Dimension mainFrameDimension;
	private double scale;
		
	private transient static BatchState instance = null;
	
	private static XStream stream = new XStream(new DomDriver());
	
	private BatchState() {
		//Nothing to do here
	}
	
	public static BatchState singleton() {
		if (instance == null) {
			instance = new BatchState();
			return instance;
		} else {
			return instance;
		}
	}
	
	//Listeners
	public static void addBatchStateListener(BatchStateListener listener) {
		BatchState.singleton().listeners.add(listener);
	}
	
	//Methods
	public static void save() {
		try {
			String path = "user_state/" + ClientFacade.getUsername() + ".xml";
			FileOutputStream fileOutput = new FileOutputStream(path);
			stream.toXML(BatchState.singleton(), fileOutput);
			fileOutput.close();
			
		} catch (Exception e) {
			
		}
		
	}
	
	public static void load(String username) {
		BatchState state = null;
		try {
			String path = "user_state/" + ClientFacade.getUsername() + ".xml";
			FileInputStream fileIn = new FileInputStream(path);
	        state = (BatchState)stream.fromXML(fileIn);
	        fileIn.close();
	        
	        System.out.println("Loaded Batch: " + state.batch);
	        
	        state.listeners = BatchState.singleton().listeners;
	        instance = state;
	        	        
	        for (BatchStateListener listener : BatchState.singleton().listeners) {
				listener.newBatchLoaded(BatchState.getBatch(), BatchState.getProject());
			}
	        
		} catch (Exception e) {
			
		}
	}
	
	//Getters and Setters
	public static void setBatchSize(int numColumns, int numRows) {
		BatchState.singleton().values = new String[numColumns][numRows];
	}
	
	
	public static String getValue(int column, int row) {
		String value = BatchState.singleton().values[column][row];
		
		if (value == null) {
			return "";
		}
				
		return BatchState.singleton().values[column][row];
	}
	
	public static void setValue(int column, int row, String value) {
		BatchState.singleton().values[column][row] = value;
		
		ArrayList<String> suggestions = (ArrayList<String>)BatchState.checkValue(value, new Cell(column, row));
		
		if (suggestions != null) {
			BatchState.addErrorCell(new Cell(column, row));
		} else {
			
		}
		
		for (BatchStateListener listener : BatchState.singleton().listeners ) {
			listener.valueChanged(new Cell(column, row), value);
		}
	}
	
	public static Cell getSelectedCell() {
		return BatchState.singleton().selectedCell;
	}
	
	public static void setSelectedCell(Cell selectedCell) {
		BatchState.singleton().selectedCell = selectedCell;
		
		for (BatchStateListener listener : BatchState.singleton().listeners ) {
			listener.selectedCellChanged(selectedCell);
		}
	}

	/**
	 * @return the project
	 */
	public static Project getProject() {
		return BatchState.singleton().project;
	}

	/**
	 * @param project the project to set
	 */
	public static void setProject(Project project) {
		BatchState.singleton().project = project;
	}

	/**
	 * @return the batch
	 */
	public static Batch getBatch() {
		return BatchState.singleton().batch;
	}

	/**
	 * @param batch the batch to set
	 */
	public static void setBatch(Batch batch) {
		BatchState.singleton().batch = batch;
	}
	
	public static void setHighlight(Boolean highlight) {
		BatchState.singleton().highlight = highlight;
	}
	
	public static Boolean getHighlight() {
		return BatchState.singleton().highlight;
	}
	
	public static void setInverted(Boolean inverted) {
		BatchState.singleton().inverted = inverted;
	}
	
	public static Boolean getInverted() {
		return BatchState.singleton().inverted;
	}
	
	public static void setMainFrameLocation(Point location) {
		BatchState.singleton().mainFrameLocation = location;
	}
	
	public static Point getMainFrameLocation() {
		return BatchState.singleton().mainFrameLocation;
	}
	
	public static void setMainFrameDimension(Dimension dimension) {
		BatchState.singleton().mainFrameDimension = dimension;
	}
	
	public static Dimension getMainFrameDimension() {
		return BatchState.singleton().mainFrameDimension;
	}
	
	public static void setScale(double scale) {
		BatchState.singleton().scale = scale;
	}
	
	public static double getScale() {
		return BatchState.singleton().scale;
	}
	
	public static void setBatchImageCenter(Point center) {
		BatchState.singleton().batchImageCenter = center;
	}
	
	public static Point getBatchImageCenter() {
		return BatchState.singleton().batchImageCenter;
	}
	
	private static void addErrorCell(Cell errorCell) {
		Boolean alreadyExists = isCellError(errorCell);
		
		if (!alreadyExists) {
			BatchState.singleton().errorCells.add(errorCell);
		}
	}
	
	private static List<String> checkValue(String value, Cell cell) {
		
		SpellingCorrector corrector = new SpellingCorrector();
		ArrayList<Field> fields = BatchState.getProject().getFields();
		
		for (Field field : fields) {
			if (field.getColNumber() == cell.getColumn() + 1) {
				try {
					URL url = new URL(field.getKnownData());
					String path = "Records" + url.getPath();
					File dictionary = new File(path);
					
					corrector.useDictionary(dictionary);
				} catch (Exception e) {
					System.out.println("Error loading Dictionary: " + e.getLocalizedMessage());
				}
				
				break;
			}
		}
		
		try {
			ArrayList<String> suggestions = (ArrayList<String>)corrector.suggestSimilarWords(value);
			System.out.println("Suggestions: \n" + suggestions);
			return suggestions;
		} catch (Exception e) {
			System.out.println("No similar word found");
			return null;
		}
		
	}
	
	public static Boolean isCellError(Cell errorCell) {
		Boolean alreadyExists = false;
		for (Cell cell : BatchState.singleton().errorCells) {
			if (errorCell.getColumn() == cell.getColumn() && errorCell.getRow() == cell.getRow()) {
				alreadyExists = true;
				break;
			}
		}
		
		return alreadyExists;
	}
	
	private static void removeCellError(Cell errorCell) {
		ArrayList<Cell> cells = BatchState.singleton().errorCells;
		int removeIndex = -1;
		for (int i = 0; i < cells.size(); i++) {
			if (cells.get(i).getColumn() == errorCell.getColumn() && cells.get(i).getRow() == errorCell.getRow()) {
				removeIndex = i;
			}
		}
		
		if (removeIndex >= 0) {
			BatchState.singleton().errorCells.remove(removeIndex);
		}
	}
}
