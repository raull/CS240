package server.access;

import java.sql.*;
import java.util.List;

import server.Database;
import server.DatabaseException;
import shared.modal.*;

/**
 * User Data Access Object class. For Accessing and persisting to the database concerning User operations
 * */
public class UserDAO {
	
	
	//Instance Fields
	/**
	 * Database object to start and end transactions
	 */
	private Database db;
	
	
	//-----------------------------------------------------
	//Constructors
	
	public UserDAO(Database db) {
		this.db = db;
	}
	
	
	//-----------------------------------------------------
	/**
	 * Find all the Users in the Database
	 * @return A list with all the Users in the Database
	 * */
	public List<User> findAll() {
		return null;
	}
	
	/**
	 * Find a User by providing the User's ID
	 * @param id of the user to find
	 * @return A User matching the provided User
	 */
	public User findById(int id) throws DatabaseException{
		
		PreparedStatement stm = null;
		ResultSet result = null;
		
		User user = null;
		
		try {
			//Start Transaction
			db.startTransaction();
			
			//Set up Query
			String sql = "SELECT username, password, firstname, lastname, email FROM user WHERE id =" + id;
			stm = db.getConnection().prepareStatement(sql);

			//Execute Query
			result = stm.executeQuery();
			
			//Handle Response to create new User
			while (result.next()) {
				String username = result.getString(0);
				String password = result.getString(1);
				String firstName = result.getString(2);
				String lastName = result.getString(3);
				String email = result.getString(4);
				
				user = new User(id, username, password, firstName, lastName, email);
			}
			
		} catch (SQLException e) {
			db.endTransaction(false);
			throw new DatabaseException("Error finding User", e);
		} catch (DatabaseException e) {
			db.endTransaction(false);
			throw new DatabaseException("Error with Database", e);
		}
		
		db.endTransaction(true);
		
		return user;
	}
	
	/**
	 * Find a User by providing the User's username
	 * @param username of the user to find
	 * @return A User matching the provided username
	 */
	public User findByUsername(String username) {
		return null;
	}
	
	/**
	 * Insert a new User to the Database
	 * @param newUser, a User object representing the new User to persist
	 * @return true if the User was inserted successfully, otherwise false
	 */
	public boolean insertNewUser(User newUser) throws DatabaseException {
		
		PreparedStatement stm = null;
		ResultSet result = null;
		Statement keyStm = null; 
				
		try {
			
			//Start transaction
			db.startTransaction();
			
			//Set up Query
			String sql = "INSERT INTO user (username, password, firstname, lastname, email) VALUES (?,?,?,?,?)";
			stm = db.getConnection().prepareStatement(sql);
			stm.setString(1, newUser.getUsername());
			stm.setString(2, newUser.getPassword());
			stm.setString(3, newUser.getFirstName());
			stm.setString(4, newUser.getLastName());
			stm.setString(5, newUser.getEmail());
			
			if (stm.executeUpdate() == 1) {
				keyStm = db.getConnection().createStatement();
				result = keyStm.executeQuery("SELECT last_insert_rowid()");
				result.next();
				
			}
			
			result = stm.executeQuery();
			
			
		} catch (SQLException e) {
			db.endTransaction(false);
			throw new DatabaseException("Error adding User", e);
		} catch (DatabaseException e) {
			db.endTransaction(false);
			throw new DatabaseException("Error on connecting to the Database", e);
		}
		
		return true;
	}
	
	/**
	 * Update user in the Database
	 * @param user, User object containing new information to update
	 * @return true if the User was updated successfully, otherwise false
	 */
	public boolean updateUser(User user) {
		return false;
	}
	
	/**
	 * Delete User 
	 * @param User object representing the User to delete
	 * @return true if the User was deleted successfully, otherwise false
	 */
	public boolean deleteUser(User user) {
		return false;
	}
	
	/**
	 * Delete User by providing the User's ID
	 * @param id representing the User's ID
	 * @return true if the User was deleted successfully, otherwise false
	 */
	public boolean deleteUserWithId(int id) {
		return false;
	}
	
	
}
