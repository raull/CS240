package server.access;

import static org.junit.Assert.*;

import java.util.List;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import server.Database;
import server.DatabaseException;
import shared.modal.Batch;
import shared.modal.Project;

public class BatchDAOTest {

	@BeforeClass
	public static void setUpBeforeClass() throws Exception{
		Database.initialize();
	}
	
	@AfterClass
	public static void afterClassTeardown() throws Exception {
		return;
	}
	
	
	private Database db;
	private BatchDAO batchDAO;
	
	@Before
	public void setUp() throws Exception {
		db = new Database();
		db.isTest(true);
		db.startTransaction();
		
		List<Batch> allBatches = db.getBatchDAO().getAll();
		
		//Clear out User table
		for (Batch batch : allBatches) {
			db.getProjectDAO().deleteProjectWithId(batch.getId());
		}
		
		db.endTransaction(true);
		
		//Prepare Database for test case
		db = new Database();
		db.isTest(true);
		db.startTransaction();
		batchDAO = db.getBatchDAO();
	}
	
	@After
	public void teardown() throws Exception{
		db.endTransaction(true);
		db = null;
		batchDAO = null;
	}


	@Test
	public void testGetAll() throws DatabaseException{
		
		List<Batch> allBatchList = batchDAO.getAll();
		assertEquals(0, allBatchList.size());
	}
	
	@Test
	public void testAdd() throws DatabaseException {
		Batch batchTest1 = new Batch("../directory/theFile", 0);
		Project batchTest2 = new Batch("/anotherDirectory/theFile", -1);
		
		projectDAO.insertNewProject(projectTest1);
		projectDAO.insertNewProject(projectTest2);
		
		//Test to see that their id got updated
		assertFalse(projectTest1.getId() <= 0);
		assertFalse(projectTest2.getId() <= 0);
		
		//Test that their id is different
		assertFalse(projectTest1.getId() == projectTest2.getId());
		
		//Test to see they actually got added
		
		List<Project> allProjects = projectDAO.getAll();
		
		assertEquals(2, allProjects.size());
		
		boolean foundTest1 = false;
		boolean foundTest2 = false;
		
		for (Project project : allProjects) {
			assertFalse(project.getId() <= 0);
			
			if (!foundTest1) {
				foundTest1 = areEqual(project, projectTest1, true);
			}
			
			if (!foundTest2) {
				foundTest2 = areEqual(project, projectTest2, true);
			}
		}
		
		//Test to see they actually got found
		assertTrue(foundTest1 && foundTest2);
		
	}

}
